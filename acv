SYSTEM(3)                  Linux Programmer's Manual                 SYSTEM(3)

NNAAMMEE
       system - execute a shell command

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssttddlliibb..hh>>

       iinntt ssyysstteemm((ccoonnsstt cchhaarr **_c_o_m_m_a_n_d));;

DDEESSCCRRIIPPTTIIOONN
       The  ssyysstteemm()  library  function uses ffoorrkk(2) to create a child process
       that executes the shell command specified in _c_o_m_m_a_n_d using eexxeeccll(3)  as
       follows:

           execl("/bin/sh", "sh", "-c", command, (char *) 0);

       ssyysstteemm() returns after the command has been completed.

       During  execution  of  the command, SSIIGGCCHHLLDD will be blocked, and SSIIGGIINNTT
       and SSIIGGQQUUIITT will be ignored, in the process that calls ssyysstteemm()  (these
       signals  will  be  handled according to their defaults inside the child
       process that executes _c_o_m_m_a_n_d).

       If _c_o_m_m_a_n_d is NULL, then ssyysstteemm() returns a status indicating whether a
       shell is available on the system

RREETTUURRNN VVAALLUUEE
       The return value of ssyysstteemm() is one of the following:

       *  If _c_o_m_m_a_n_d is NULL, then a nonzero value if a shell is available, or
          0 if no shell is available.

       *  If a child process could not be created, or its status could not  be
          retrieved, the return value is -1.

       *  If  a  shell  could  not  be executed in the child process, then the
          return value is as though the  child  shell  terminated  by  calling
          __eexxiitt(2) with the status 127.

       *  If  all  system calls succeed, then the return value is the termina‐
          tion status of the child shell used to execute _c_o_m_m_a_n_d.  (The termi‐
          nation  status of a shell is the termination status of the last com‐
          mand it executes.)

       In the last two cases, the return value is a "wait status" that can  be
       examined using the macros described in wwaaiittppiidd(2).  (i.e., WWIIFFEEXXIITTEEDD(),
       WWEEXXIITTSSTTAATTUUSS(), and so on).

       ssyysstteemm() does not affect the wait status of any other children.

AATTTTRRIIBBUUTTEESS
       For  an  explanation  of  the  terms  used   in   this   section,   see
       aattttrriibbuutteess(7).

       ┌──────────┬───────────────┬─────────┐
       │IInntteerrffaaccee │ AAttttrriibbuuttee     │ VVaalluuee   │
       ├──────────┼───────────────┼─────────┤
       │ssyysstteemm()  │ Thread safety │ MT-Safe │
       └──────────┴───────────────┴─────────┘
CCOONNFFOORRMMIINNGG TTOO
       POSIX.1-2001, POSIX.1-2008, C89, C99.

NNOOTTEESS
       ssyysstteemm()  provides  simplicity  and  convenience: it handles all of the
       details of calling ffoorrkk(2), eexxeeccll(3), and wwaaiittppiidd(2), as  well  as  the
       necessary manipulations of signals; in addition, the shell performs the
       usual substitutions and I/O redirections for _c_o_m_m_a_n_d.  The main cost of
       ssyysstteemm()  is inefficiency: additional system calls are required to cre‐
       ate the process that runs the shell and to execute the shell.

       If the __XXOOPPEENN__SSOOUURRCCEE feature test macro is  defined  (before  including
       _a_n_y  header  files), then the macros described in wwaaiittppiidd(2) (WWEEXXIITTSSTTAA‐‐
       TTUUSS(), etc.) are made available when including _<_s_t_d_l_i_b_._h_>.

       As mentioned, ssyysstteemm() ignores SSIIGGIINNTT and SSIIGGQQUUIITT.  This may make  pro‐
       grams  that  call it from a loop uninterruptible, unless they take care
       themselves to check the exit status of the child.  For example:

           while (something) {
               int ret = system("foo");

               if (WIFSIGNALED(ret) &&
                   (WTERMSIG(ret) == SIGINT || WTERMSIG(ret) == SIGQUIT))
                       break;
           }

       Do not use ssyysstteemm() from a program  with  set-user-ID  or  set-group-ID
       privileges, because strange values for some environment variables might
       be used to subvert system integrity.  Use the eexxeecc(3) family  of  func‐
       tions  instead,  but not eexxeeccllpp(3) or eexxeeccvvpp(3).  ssyysstteemm() will not, in
       fact, work properly from  programs  with  set-user-ID  or  set-group-ID
       privileges  on systems on which _/_b_i_n_/_s_h is bash version 2, since bash 2
       drops privileges on startup.  (Debian uses a modified bash  which  does
       not do this when invoked as sshh.)

       In  versions  of  glibc before 2.1.3, the check for the availability of
       _/_b_i_n_/_s_h was not actually performed if _c_o_m_m_a_n_d was NULL; instead it  was
       always  assumed to be available, and ssyysstteemm() always returned 1 in this
       case.  Since glibc 2.1.3, this check is performed because, even  though
       POSIX.1-2001  requires  a conforming implementation to provide a shell,
       that shell may not be available or executable if  the  calling  program
       has   previously   called   cchhrroooott(2)   (which   is  not  specified  by
       POSIX.1-2001).

       It is possible for the shell command to terminate with a status of 127,
       which yields a ssyysstteemm() return value that is indistinguishable from the
       case where a shell could not be executed in the child process.

SSEEEE AALLSSOO
       sshh(1),  eexxeeccvvee(2),  ffoorrkk(2),  ssiiggaaccttiioonn(2),  ssiiggpprrooccmmaasskk(2),   wwaaiitt(2),
       eexxeecc(3), ssiiggnnaall(7)

CCOOLLOOPPHHOONN
       This  page  is  part of release 4.09 of the Linux _m_a_n_-_p_a_g_e_s project.  A
       description of the project, information about reporting bugs,  and  the
       latest     version     of     this    page,    can    be    found    at
       https://www.kernel.org/doc/man-pages/.

                                  2016-10-08                         SYSTEM(3)
